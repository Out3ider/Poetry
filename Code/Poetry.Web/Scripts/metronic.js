var Metronic = function () { var B, a = !1, b = !1, c = !1, d = !1, e = [], f = "../../assets/", g = "global/img/", h = "global/plugins/", i = "global/css/", j = { blue: "#89C4F4", red: "#F3565D", green: "#1bbc9b", purple: "#9b59b6", grey: "#95a5a6", yellow: "#F8CB00" }, k = function () { "rtl" === $("body").css("direction") && (a = !0), b = !!navigator.userAgent.match(/MSIE 8.0/), c = !!navigator.userAgent.match(/MSIE 9.0/), d = !!navigator.userAgent.match(/MSIE 10.0/), d && $("html").addClass("ie10"), (d || c || b) && $("html").addClass("ie") }, l = function () { var a, b; for (a = 0; a < e.length; a++) b = e[a], b.call() }, m = function () { var a, c; b ? $(window).resize(function () { c != document.documentElement.clientHeight && (a && clearTimeout(a), a = setTimeout(function () { l() }, 50), c = document.documentElement.clientHeight) }) : $(window).resize(function () { a && clearTimeout(a), a = setTimeout(function () { l() }, 50) }) }, n = function () { $("body").on("click", ".portlet > .portlet-title > .tools > a.remove", function (a) { a.preventDefault(); var b = $(this).closest(".portlet"); $("body").hasClass("page-portlet-fullscreen") && $("body").removeClass("page-portlet-fullscreen"), b.find(".portlet-title .fullscreen").tooltip("destroy"), b.find(".portlet-title > .tools > .reload").tooltip("destroy"), b.find(".portlet-title > .tools > .remove").tooltip("destroy"), b.find(".portlet-title > .tools > .config").tooltip("destroy"), b.find(".portlet-title > .tools > .collapse, .portlet > .portlet-title > .tools > .expand").tooltip("destroy"), b.remove() }), $("body").on("click", ".portlet > .portlet-title .fullscreen", function (a) { var b, c; a.preventDefault(), b = $(this).closest(".portlet"), b.hasClass("portlet-fullscreen") ? ($(this).removeClass("on"), b.removeClass("portlet-fullscreen"), $("body").removeClass("page-portlet-fullscreen"), b.children(".portlet-body").css("height", "auto")) : (c = Metronic.getViewPort().height - b.children(".portlet-title").outerHeight() - parseInt(b.children(".portlet-body").css("padding-top")) - parseInt(b.children(".portlet-body").css("padding-bottom")), $(this).addClass("on"), b.addClass("portlet-fullscreen"), $("body").addClass("page-portlet-fullscreen"), b.children(".portlet-body").css("height", c)) }), $("body").on("click", ".portlet > .portlet-title > .tools > a.reload", function (a) { var b, c, d; a.preventDefault(), b = $(this).closest(".portlet").children(".portlet-body"), c = $(this).attr("data-url"), d = $(this).attr("data-error-display"), c ? (Metronic.blockUI({ target: b, animate: !0, overlayColor: "none" }), $.ajax({ type: "GET", cache: !1, url: c, dataType: "html", success: function (a) { Metronic.unblockUI(b), b.html(a) }, error: function () { Metronic.unblockUI(b); var f = "Error on reloading the content. Please check your connection and try again."; "toastr" == d && toastr ? toastr.error(f) : "notific8" == d && $.notific8 ? ($.notific8("zindex", 11500), $.notific8(f, { theme: "ruby", life: 3e3 })) : alert(f) } })) : (Metronic.blockUI({ target: b, animate: !0, overlayColor: "none" }), window.setTimeout(function () { Metronic.unblockUI(b) }, 1e3)) }), $('.portlet .portlet-title a.reload[data-load="true"]').click(), $("body").on("click", ".portlet > .portlet-title > .tools > .collapse, .portlet .portlet-title > .tools > .expand", function (a) { a.preventDefault(); var b = $(this).closest(".portlet").children(".portlet-body"); $(this).hasClass("collapse") ? ($(this).removeClass("collapse").addClass("expand"), b.slideUp(200)) : ($(this).removeClass("expand").addClass("collapse"), b.slideDown(200)) }) }, o = function () { if ($().uniform) { var a = $("input[type=checkbox]:not(.toggle, .md-check, .md-radiobtn, .make-switch, .icheck), input[type=radio]:not(.toggle, .md-check, .md-radiobtn, .star, .make-switch, .icheck)"); a.size() > 0 && a.each(function () { 0 === $(this).parents(".checker").size() && ($(this).show(), $(this).uniform()) }) } }, p = function () { $("body").on("click", ".md-checkbox > label, .md-radio > label", function () { var c, a = $(this), b = $(this).children("span:first-child"); b.addClass("inc"), c = b.clone(!0), b.before(c), $("." + b.attr("class") + ":last", a).remove() }), $("body").hasClass("page-md") && $("body").on("click", "a.btn, button.btn, input.btn, label.btn", function (a) { var b, c, d, e, f; b = $(this), 0 == b.find(".md-click-circle").length && b.prepend("<span class='md-click-circle'></span>"), c = b.find(".md-click-circle"), c.removeClass("md-click-animate"), c.height() || c.width() || (d = Math.max(b.outerWidth(), b.outerHeight()), c.css({ height: d, width: d })), e = a.pageX - b.offset().left - c.width() / 2, f = a.pageY - b.offset().top - c.height() / 2, c.css({ top: f + "px", left: e + "px" }).addClass("md-click-animate") }); var a = function (a) { "" != a.val() ? a.addClass("edited") : a.removeClass("edited") }; $("body").on("keydown", ".form-md-floating-label .form-control", function () { a($(this)) }), $("body").on("blur", ".form-md-floating-label .form-control", function () { a($(this)) }) }, q = function () { $().iCheck && $(".icheck").each(function () { var a = $(this).attr("data-checkbox") ? $(this).attr("data-checkbox") : "icheckbox_minimal-grey", b = $(this).attr("data-radio") ? $(this).attr("data-radio") : "iradio_minimal-grey"; a.indexOf("_line") > -1 || b.indexOf("_line") > -1 ? $(this).iCheck({ checkboxClass: a, radioClass: b, insert: '<div class="icheck_line-icon"></div>' + $(this).attr("data-label") }) : $(this).iCheck({ checkboxClass: a, radioClass: b }) }) }, r = function () { $().bootstrapSwitch && $(".make-switch").bootstrapSwitch() }, s = function () { $().confirmation && $("[data-toggle=confirmation]").confirmation({ container: "body", btnOkClass: "btn-xs btn-success", btnCancelClass: "btn-xs btn-danger" }) }, t = function () { $("body").on("shown.bs.collapse", ".accordion.scrollable", function (a) { Metronic.scrollTo($(a.target)) }) }, u = function () { if (location.hash) { var a = location.hash.substr(1); $('a[href="#' + a + '"]').parents(".tab-pane:hidden").each(function () { var a = $(this).attr("id"); $('a[href="#' + a + '"]').click() }), $('a[href="#' + a + '"]').click() } $().tabdrop && $(".tabbable-tabdrop .nav-pills, .tabbable-tabdrop .nav-tabs").tabdrop({ text: '<i class="fa fa-ellipsis-v"></i>&nbsp;<i class="fa fa-angle-down"></i>' }) }, v = function () { $("body").on("hide.bs.modal", function () { $(".modal:visible").size() > 1 && $("html").hasClass("modal-open") === !1 ? $("html").addClass("modal-open") : $(".modal:visible").size() <= 1 && $("html").removeClass("modal-open") }), $("body").on("show.bs.modal", ".modal", function () { $(this).hasClass("modal-scroll") && $("body").addClass("modal-open-noscroll") }), $("body").on("hide.bs.modal", ".modal", function () { $("body").removeClass("modal-open-noscroll") }), $("body").on("hidden.bs.modal", ".modal:not(.modal-cached)", function () { $(this).removeData("bs.modal") }) }, w = function () { $(".tooltips").tooltip(), $(".portlet > .portlet-title .fullscreen").tooltip({ container: "body", title: "Fullscreen" }), $(".portlet > .portlet-title > .tools > .reload").tooltip({ container: "body", title: "Reload" }), $(".portlet > .portlet-title > .tools > .remove").tooltip({ container: "body", title: "Remove" }), $(".portlet > .portlet-title > .tools > .config").tooltip({ container: "body", title: "Settings" }), $(".portlet > .portlet-title > .tools > .collapse, .portlet > .portlet-title > .tools > .expand").tooltip({ container: "body", title: "Collapse/Expand" }) }, x = function () { $("body").on("click", ".dropdown-menu.hold-on-click", function (a) { a.stopPropagation() }) }, y = function () { $("body").on("click", '[data-close="alert"]', function (a) { $(this).parent(".alert").hide(), $(this).closest(".note").hide(), a.preventDefault() }), $("body").on("click", '[data-close="note"]', function (a) { $(this).closest(".note").hide(), a.preventDefault() }), $("body").on("click", '[data-remove="note"]', function (a) { $(this).closest(".note").remove(), a.preventDefault() }) }, z = function () { $('[data-hover="dropdown"]').not(".hover-initialized").each(function () { $(this).dropdownHover(), $(this).addClass("hover-initialized") }) }, A = function () { "function" == typeof autosize && autosize(document.querySelector("textarea.autosizeme")) }, C = function () { $(".popovers").popover(), $(document).on("click.bs.popover.data-api", function () { B && B.popover("hide") }) }, D = function () { Metronic.initSlimScroll(".scroller") }, E = function () { jQuery.fancybox && $(".fancybox-button").size() > 0 && $(".fancybox-button").fancybox({ groupAttr: "data-rel", prevEffect: "none", nextEffect: "none", closeBtn: !0, helpers: { title: { type: "inside" } } }) }, F = function () { (b || c) && $("input[placeholder]:not(.placeholder-no-fix), textarea[placeholder]:not(.placeholder-no-fix)").each(function () { var a = $(this); "" === a.val() && "" !== a.attr("placeholder") && a.addClass("placeholder").val(a.attr("placeholder")), a.focus(function () { a.val() == a.attr("placeholder") && a.val("") }), a.blur(function () { ("" === a.val() || a.val() == a.attr("placeholder")) && a.val(a.attr("placeholder")) }) }) }, G = function () { $().select2 && $(".select2me").select2({ placeholder: "Select", allowClear: !0 }) }; return { init: function () { k(), m(), p(), o(), q(), r(), D(), E(), G(), n(), y(), x(), u(), w(), C(), t(), v(), s(), A(), F() }, initAjax: function () { o(), q(), r(), z(), D(), G(), E(), x(), w(), C(), t(), s() }, initComponents: function () { this.initAjax() }, setLastPopedPopover: function (a) { B = a }, addResizeHandler: function (a) { e.push(a) }, runResizeHandlers: function () { l() }, scrollTo: function (a, b) { var c = a && a.size() > 0 ? a.offset().top : 0; a && ($("body").hasClass("page-header-fixed") ? c -= $(".page-header").height() : $("body").hasClass("page-header-top-fixed") ? c -= $(".page-header-top").height() : $("body").hasClass("page-header-menu-fixed") && (c -= $(".page-header-menu").height()), c += b ? b : -1 * a.height()), $("html,body").animate({ scrollTop: c }, "slow") }, initSlimScroll: function (b) { $(b).each(function () { if (!$(this).attr("data-initialized")) { var b; b = $(this).attr("data-height") ? $(this).attr("data-height") : $(this).css("height"), $(this).slimScroll({ allowPageScroll: !0, size: "7px", color: $(this).attr("data-handle-color") ? $(this).attr("data-handle-color") : "#bbb", wrapperClass: $(this).attr("data-wrapper-class") ? $(this).attr("data-wrapper-class") : "slimScrollDiv", railColor: $(this).attr("data-rail-color") ? $(this).attr("data-rail-color") : "#eaeaea", position: a ? "left" : "right", height: b, alwaysVisible: "1" == $(this).attr("data-always-visible") ? !0 : !1, railVisible: "1" == $(this).attr("data-rail-visible") ? !0 : !1, disableFadeOut: !0 }), $(this).attr("data-initialized", "1") } }) }, destroySlimScroll: function (a) { $(a).each(function () { var a, b; "1" === $(this).attr("data-initialized") && ($(this).removeAttr("data-initialized"), $(this).removeAttr("style"), a = {}, $(this).attr("data-handle-color") && (a["data-handle-color"] = $(this).attr("data-handle-color")), $(this).attr("data-wrapper-class") && (a["data-wrapper-class"] = $(this).attr("data-wrapper-class")), $(this).attr("data-rail-color") && (a["data-rail-color"] = $(this).attr("data-rail-color")), $(this).attr("data-always-visible") && (a["data-always-visible"] = $(this).attr("data-always-visible")), $(this).attr("data-rail-visible") && (a["data-rail-visible"] = $(this).attr("data-rail-visible")), $(this).slimScroll({ wrapperClass: $(this).attr("data-wrapper-class") ? $(this).attr("data-wrapper-class") : "slimScrollDiv", destroy: !0 }), b = $(this), $.each(a, function (a, c) { b.attr(a, c) })) }) }, scrollTop: function () { Metronic.scrollTo() }, blockUI: function (a) { var b, c; a = $.extend(!0, {}, a), b = "", b = a.animate ? '<div class="loading-message ' + (a.boxed ? "loading-message-boxed" : "") + '">' + '<div class="block-spinner-bar"><div class="bounce1"></div><div class="bounce2"></div><div class="bounce3"></div></div>' + "</div>" : a.iconOnly ? '<div class="loading-message ' + (a.boxed ? "loading-message-boxed" : "") + '"><img src="' + this.getGlobalImgPath() + 'loading-spinner-grey.gif" align=""></div>' : a.textOnly ? '<div class="loading-message ' + (a.boxed ? "loading-message-boxed" : "") + '"><span>&nbsp;&nbsp;' + (a.message ? a.message : "LOADING...") + "</span></div>" : '<div class="loading-message ' + (a.boxed ? "loading-message-boxed" : "") + '"><img src="' + this.getGlobalImgPath() + 'loading-spinner-grey.gif" align=""><span>&nbsp;&nbsp;' + (a.message ? a.message : "LOADING...") + "</span></div>", a.target ? (c = $(a.target), c.height() <= $(window).height() && (a.cenrerY = !0), c.block({ message: b, baseZ: a.zIndex ? a.zIndex : 1e3, centerY: void 0 !== a.cenrerY ? a.cenrerY : !1, css: { top: "10%", border: "0", padding: "0", backgroundColor: "none" }, overlayCSS: { backgroundColor: a.overlayColor ? a.overlayColor : "#555", opacity: a.boxed ? .05 : .1, cursor: "wait" } })) : $.blockUI({ message: b, baseZ: a.zIndex ? a.zIndex : 1e3, css: { border: "0", padding: "0", backgroundColor: "none" }, overlayCSS: { backgroundColor: a.overlayColor ? a.overlayColor : "#555", opacity: a.boxed ? .05 : .1, cursor: "wait" } }) }, unblockUI: function (a) { a ? $(a).unblock({ onUnblock: function () { $(a).css("position", ""), $(a).css("zoom", "") } }) : $.unblockUI() }, startPageLoading: function (a) { a && a.animate ? ($(".page-spinner-bar").remove(), $("body").append('<div class="page-spinner-bar"><div class="bounce1"></div><div class="bounce2"></div><div class="bounce3"></div></div>')) : ($(".page-loading").remove(), $("body").append('<div class="page-loading"><img src="' + this.getGlobalImgPath() + 'loading-spinner-grey.gif"/>&nbsp;&nbsp;<span>' + (a && a.message ? a.message : "Loading...") + "</span></div>")) }, stopPageLoading: function () { $(".page-loading, .page-spinner-bar").remove() }, alert: function (a) { var b, c; return a = $.extend(!0, { container: "", place: "append", type: "success", message: "", close: !0, reset: !0, focus: !0, closeInSeconds: 0, icon: "" }, a), b = Metronic.getUniqueID("Metronic_alert"), c = '<div id="' + b + '" class="Metronic-alerts alert alert-' + a.type + ' fade in">' + (a.close ? '<button type="button" class="close" data-dismiss="alert" aria-hidden="true"></button>' : "") + ("" !== a.icon ? '<i class="fa-lg fa fa-' + a.icon + '"></i>  ' : "") + a.message + "</div>", a.reset && $(".Metronic-alerts").remove(), a.container ? "append" == a.place ? $(a.container).append(c) : $(a.container).prepend(c) : $("body").hasClass("page-container-bg-solid") ? $(".page-title").after(c) : $(".page-bar").size() > 0 ? $(".page-bar").after(c) : $(".page-breadcrumb").after(c), a.focus && Metronic.scrollTo($("#" + b)), a.closeInSeconds > 0 && setTimeout(function () { $("#" + b).remove() }, 1e3 * a.closeInSeconds), b }, initUniform: function (a) { a ? $(a).each(function () { 0 === $(this).parents(".checker").size() && ($(this).show(), $(this).uniform()) }) : o() }, updateUniform: function (a) { $.uniform.update(a) }, initFancybox: function () { E() }, getActualVal: function (a) { return a = $(a), a.val() === a.attr("placeholder") ? "" : a.val() }, getURLParameter: function (a) { var c, d, b = window.location.search.substring(1), e = b.split("&"); for (c = 0; c < e.length; c++) if (d = e[c].split("="), d[0] == a) return unescape(d[1]); return null }, isTouchDevice: function () { try { return document.createEvent("TouchEvent"), !0 } catch (a) { return !1 } }, getViewPort: function () { var a = window, b = "inner"; return "innerWidth" in window || (b = "client", a = document.documentElement || document.body), { width: a[b + "Width"], height: a[b + "Height"] } }, getUniqueID: function () { return "prefix_" + Math.floor(Math.random() * (new Date).getTime()) }, isIE8: function () { return b }, isIE9: function () { return c }, isRTL: function () { return a }, isAngularJsApp: function () { return "undefined" == typeof angular ? !1 : !0 }, getAssetsPath: function () { return f }, setAssetsPath: function (a) { f = a }, setGlobalImgPath: function (a) { g = a }, getGlobalImgPath: function () { return f + g }, setGlobalPluginsPath: function (a) { h = a }, getGlobalPluginsPath: function () { return f + h }, getGlobalCssPath: function () { return f + i }, getBrandColor: function (a) { return j[a] ? j[a] : "" }, getResponsiveBreakpoint: function (a) { var b = { xs: 480, sm: 768, md: 992, lg: 1200 }; return b[a] ? b[a] : 0 } } }();