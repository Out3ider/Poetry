<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ivony.Logs</name>
    </assembly>
    <members>
        <member name="T:Ivony.Logs.BlankLogger">
            <summary>
            代表一个不将日志记录到任何地方的日志记录器
            </summary>
        </member>
        <member name="M:Ivony.Logs.BlankLogger.LogEntry(Ivony.Logs.LogEntry)">
            <summary>
            重写 LogEntry 方法，什么事都不干。
            </summary>
            <param name="entry">要记录的日志条目</param>
        </member>
        <member name="F:Ivony.Logs.BlankLogger.Instance">
            <summary>
            获取一个 BlankLogger 的实例
            </summary>
        </member>
        <member name="T:Ivony.Logs.ConsoleLogger">
            <summary>
            将日志信息输出到控制台的日志记录器
            </summary>
        </member>
        <member name="M:Ivony.Logs.ConsoleLogger.#ctor(Ivony.Logs.LogFilter)">
            <summary>
            创建 ConsoleLogger 实例
            </summary>
            <param name="filter">日志筛选器，确定哪些日志需要被记录</param>
        </member>
        <member name="M:Ivony.Logs.ConsoleLogger.WriteLogMessage(Ivony.Logs.LogEntry,System.String[])">
            <summary>
            重写 WriteLogMessage 方法，在控制台输出日志信息
            </summary>
            <param name="entry">日志条目</param>
            <param name="contents">要显示的文本内容</param>
        </member>
        <member name="M:Ivony.Logs.ConsoleLogger.GetPadding(Ivony.Logs.LogEntry)">
            <summary>
            重写 GetPadding 方法，返回空字符串，在控制台显示时取消填充
            </summary>
            <param name="entry">当前要记录的日志条目</param>
            <returns>永远返回空字符串</returns>
        </member>
        <member name="T:Ivony.Logs.ILogMetaProvider">
            <summary>
            定义 LogMeta 数据提供程序
            </summary>
        </member>
        <member name="M:Ivony.Logs.ILogMetaProvider.GetLogMeta(Ivony.Logs.LogMeta)">
            <summary>
            获取 LogMeta 数据
            </summary>
            <param name="metaData">参考的日志元数据</param>
            <returns>LogMeta 数据</returns>
        </member>
        <member name="T:Ivony.Logs.LogCollection">
            <summary>
            定义一个可以将日志保存起来以供检索的容器
            </summary>
        </member>
        <member name="M:Ivony.Logs.LogCollection.#ctor">
            <summary>
            创建 LogCollection 对象
            </summary>
        </member>
        <member name="M:Ivony.Logs.LogCollection.LogEntry(Ivony.Logs.LogEntry)">
            <summary>
            重写 WriteLog 方法记录日志
            </summary>
            <param name="entry">要记录的日志条目</param>
        </member>
        <member name="M:Ivony.Logs.LogCollection.Clear">
            <summary>
            清空日志容器
            </summary>
        </member>
        <member name="T:Ivony.Logs.LogFileCycles">
            <summary>
            定义日志文件周期性枚举
            </summary>
        </member>
        <member name="P:Ivony.Logs.LogFileCycles.Daily">
            <summary>
            获取每日产生一个新的日志文件的日志文件名策略
            </summary>
        </member>
        <member name="P:Ivony.Logs.LogFileCycles.Hourly">
            <summary>
            获取每小时产生一个新的日志文件的日志文件名策略
            </summary>
        </member>
        <member name="P:Ivony.Logs.LogFileCycles.Minutely">
            <summary>
            获取每分钟产生一个新的日志文件的日志文件名策略
            </summary>
        </member>
        <member name="P:Ivony.Logs.LogFileCycles.Monthly">
            <summary>
            获取每月产生一个新的日志文件的日志文件名策略
            </summary>
        </member>
        <member name="T:Ivony.Logs.LogFilenameStrategy">
            <summary>
            定义日志文件名策略
            </summary>
        </member>
        <member name="M:Ivony.Logs.LogFilenameStrategy.GetName(Ivony.Logs.LogEntry)">
            <summary>
            获取名称
            </summary>
            <param name="entry">日志记录</param>
            <returns>当前日志条目应当分配的名称</returns>
        </member>
        <member name="M:Ivony.Logs.LogFilenameStrategy.op_Implicit(System.String)~Ivony.Logs.LogFilenameStrategy">
            <summary>
            提供从字符串对象到 LogFilenameStrategy 对象的隐式类型转换
            </summary>
            <param name="literal">要转换为日志文件名策略的文本字符串</param>
            <returns>一个静态的日志文件名策略</returns>
        </member>
        <member name="M:Ivony.Logs.LogFilenameStrategy.op_Addition(Ivony.Logs.LogFilenameStrategy,Ivony.Logs.LogFilenameStrategy)">
            <summary>
            合并两个日志文件名策略
            </summary>
            <param name="strategy1">第一个日志文件名策略</param>
            <param name="strategy2">另一个日志文件名策略</param>
            <returns>合并后的日志文件名策略</returns>
        </member>
        <member name="M:Ivony.Logs.LogFilenameStrategy.op_Addition(System.String,Ivony.Logs.LogFilenameStrategy)">
            <summary>
            合并一个静态文本前缀到日志文件名策略
            </summary>
            <param name="literal">前缀文本</param>
            <param name="strategy">日志文件名策略</param>
            <returns>合并后的日志文件名策略</returns>
        </member>
        <member name="M:Ivony.Logs.LogFilenameStrategy.op_Addition(Ivony.Logs.LogFilenameStrategy,System.String)">
            <summary>
            合并一个静态文本后缀到日志文件名策略
            </summary>
            <param name="strategy">日志文件名策略</param>
            <param name="literal">后缀文本</param>
            <returns>合并后的日志文件名策略</returns>
        </member>
        <member name="T:Ivony.Logs.LogFilter">
            <summary>
            定义日志筛选器的抽象基类
            </summary>
        </member>
        <member name="M:Ivony.Logs.LogFilter.Writable(Ivony.Logs.LogEntry)">
            <summary>
            确定指定的日志条目是否需要记录
            </summary>
            <param name="entry">日志条目</param>
            <returns>是否需要记录</returns>
        </member>
        <member name="M:Ivony.Logs.LogFilter.op_BitwiseOr(Ivony.Logs.LogFilter,Ivony.Logs.LogFilter)">
            <summary>
            从两个日志筛选器中创建一个新的日志筛选器，只要满足其中任何一个日志筛选器的条件即记录日志
            </summary>
            <param name="filter1">第一个日志筛选器</param>
            <param name="filter2">第二个日志筛选器</param>
            <returns>创建的新的日志筛选器</returns>
        </member>
        <member name="M:Ivony.Logs.LogFilter.op_BitwiseAnd(Ivony.Logs.LogFilter,Ivony.Logs.LogFilter)">
            <summary>
            从两个日志筛选器中创建一个新的日志筛选器，需要满足所有日志筛选器的条件才记录日志
            </summary>
            <param name="filter1">第一个日志筛选器</param>
            <param name="filter2">第二个日志筛选器</param>
            <returns>创建的新的日志筛选器</returns>
        </member>
        <member name="P:Ivony.Logs.LogFilter.Info">
            <summary>
            指定记录一般性消息以及更严重的消息的日志筛选器
            </summary>
        </member>
        <member name="P:Ivony.Logs.LogFilter.InfoOnly">
            <summary>
            指定只记录一般性消息的日志筛选器
            </summary>
        </member>
        <member name="P:Ivony.Logs.LogFilter.ImportantInfo">
            <summary>
            指定记录一般性消息以及更严重的消息的日志筛选器
            </summary>
        </member>
        <member name="P:Ivony.Logs.LogFilter.Warning">
            <summary>
            指定记录警告消息以及更严重的消息的日志筛选器
            </summary>
        </member>
        <member name="P:Ivony.Logs.LogFilter.WarningOnly">
            <summary>
            指定只记录警告消息的日志筛选器
            </summary>
        </member>
        <member name="P:Ivony.Logs.LogFilter.Error">
            <summary>
            指定记录错误消息以及更严重的消息的日志筛选器
            </summary>
        </member>
        <member name="P:Ivony.Logs.LogFilter.ErrorOnly">
            <summary>
            指定只记录错误消息的日志筛选器
            </summary>
        </member>
        <member name="P:Ivony.Logs.LogFilter.Exception">
            <summary>
            指定记录异常消息以及更严重的消息的日志筛选器
            </summary>
        </member>
        <member name="P:Ivony.Logs.LogFilter.ExceptionOnly">
            <summary>
            指定只记录异常消息的日志筛选器
            </summary>
        </member>
        <member name="P:Ivony.Logs.LogFilter.FatalError">
            <summary>
            指定记录致命错误消息以及更严重的消息的日志筛选器
            </summary>
        </member>
        <member name="M:Ivony.Logs.LogFilter.BySource(System.String)">
            <summary>
            获取按照日志记录源的名称筛选日志
            </summary>
            <param name="logSource">日志记录源名称</param>
            <returns>筛选只指定日志记录源的日志筛选器</returns>
        </member>
        <member name="T:Ivony.Logs.LoggerWrapperExtensions">
            <summary>
            定义 Logger 的各种包装辅助方法
            </summary>
        </member>
        <member name="M:Ivony.Logs.LoggerWrapperExtensions.WithFilter(Ivony.Logs.Logger,Ivony.Logs.LogFilter)">
            <summary>
            创建一个新的日志记录器，只记录符合条件的日志
            </summary>
            <param name="logger">内部日志记录器，符合条件的日志将使用这个日志记录器记录</param>
            <param name="filter">日志记录条件</param>
            <returns>只记录符合条件的日志的日志记录器</returns>
        </member>
        <member name="M:Ivony.Logs.LoggerWrapperExtensions.WithSource(Ivony.Logs.Logger,Ivony.Logs.LogSource)">
            <summary>
            创建一个日志记录器，对于所有的日志添加日志源信息
            </summary>
            <param name="logger">内部日志记录器，将使用这个日志记录器进行实际的日志记录</param>
            <param name="source">要添加的日志源信息</param>
            <returns>会自动添加日志源信息的日志记录器</returns>
        </member>
        <member name="M:Ivony.Logs.LoggerWrapperExtensions.IgnoreError(Ivony.Logs.Logger)">
            <summary>
            创建一个新的日志记录器，忽略记录日志中出现的任何异常
            </summary>
            <param name="logger">用于记录异常的日志记录器</param>
            <returns></returns>
        </member>
        <member name="T:Ivony.Logs.LogMetaExtensions">
            <summary>
            提供 LogMeta 的一些帮助方法
            </summary>
        </member>
        <member name="M:Ivony.Logs.LogMetaExtensions.LogSource(Ivony.Logs.LogEntry)">
            <summary>
            获取日志来源信息
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Logs.LogMetaExtensions.LogSource(Ivony.Logs.LogMeta)">
            <summary>
            获取日志来源信息
            </summary>
            <param name="metaData"></param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Logs.LogMetaExtensions.LogType(Ivony.Logs.LogEntry)">
            <summary>
            获取日志类型信息
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Logs.LogMetaExtensions.LogType(Ivony.Logs.LogMeta)">
            <summary>
            获取日志类型信息
            </summary>
            <param name="metaData"></param>
            <returns></returns>
        </member>
        <member name="T:Ivony.Logs.LogScope">
            <summary>
            定义日志范畴对象
            </summary>
        </member>
        <member name="M:Ivony.Logs.LogScope.#ctor(System.String)">
            <summary>
            创建 LogScope 实例
            </summary>
            <param name="name">范畴名称</param>
        </member>
        <member name="P:Ivony.Logs.LogScope.Name">
            <summary>
            范畴名称
            </summary>
        </member>
        <member name="P:Ivony.Logs.LogScope.CurrentScope">
            <summary>
            获取当前范畴对象
            </summary>
        </member>
        <member name="P:Ivony.Logs.LogScope.RootScope">
            <summary>
            根范畴
            </summary>
        </member>
        <member name="P:Ivony.Logs.LogScope.Parent">
            <summary>
            父级范畴
            </summary>
        </member>
        <member name="M:Ivony.Logs.LogScope.EnterScope(System.String)">
            <summary>
            创建并进入一个日志范畴
            </summary>
            <param name="name">范畴名称</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Logs.LogScope.EnterScope(Ivony.Logs.LogScope)">
            <summary>
            进入一个日志范畴
            </summary>
            <param name="scope">要进入的日志范畴</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Logs.LogScope.LeaveScope(Ivony.Logs.LogScope)">
            <summary>
            离开指定的范畴，若指定范畴在当前上下文不存在，则不进行任何操作，并返回 null 。
            </summary>
            <param name="scope">要离开的范畴</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Logs.LogScope.Leave">
            <summary>
            离开当前范畴
            </summary>
        </member>
        <member name="T:Ivony.Logs.LogSourceNameRestrictFilter">
            <summary>
            定义按照日志记录源名称进行限制的日志筛选器
            </summary>
        </member>
        <member name="M:Ivony.Logs.LogSourceNameRestrictFilter.#ctor(System.String)">
            <summary>
            创建 LogSourceNameRestrictFilter 对象
            </summary>
            <param name="sourceName">日志源名称</param>
        </member>
        <member name="P:Ivony.Logs.LogSourceNameRestrictFilter.SourceName">
            <summary>
            日志源名称
            </summary>
        </member>
        <member name="M:Ivony.Logs.LogSourceNameRestrictFilter.Writable(Ivony.Logs.LogEntry)">
            <summary>
            重写 Writable 方法，确认日志条目是否由指定的日志源产生
            </summary>
            <param name="entry">要检查的日志条目</param>
            <returns>日志条目是否由指定的日志源产生</returns>
        </member>
        <member name="T:Ivony.Logs.PipedLogger">
            <summary>
            定义一个管道日志记录器
            </summary>
        </member>
        <member name="P:Ivony.Logs.PipedLogger.InnerLogger">
            <summary>
            内联日志记录器，所有通过此日志记录器的日志先交由内联记录器处理
            </summary>
        </member>
        <member name="P:Ivony.Logs.PipedLogger.ExceptionLogger">
            <summary>
            异常日志记录器，若内联日志记录器出现异常，则交由此日志记录器处理
            </summary>
        </member>
        <member name="M:Ivony.Logs.PipedLogger.#ctor(Ivony.Logs.Logger)">
            <summary>
            创建 PipedLogger 实例
            </summary>
            <param name="innerLogger">内联日志记录器</param>
        </member>
        <member name="M:Ivony.Logs.PipedLogger.#ctor(Ivony.Logs.Logger,Ivony.Logs.Logger)">
            <summary>
            创建 PipedLogger 实例
            </summary>
            <param name="innerLogger">内联日志记录器</param>
            <param name="exceptionLogger">异常日志记录器</param>
        </member>
        <member name="M:Ivony.Logs.PipedLogger.LogEntry(Ivony.Logs.LogEntry)">
            <summary>
            重写 LogEntry 方法，交由内联日志记录器记录
            </summary>
            <param name="entry">要记录的日志条目</param>
        </member>
        <member name="M:Ivony.Logs.PipedLogger.Dispose">
            <summary>
            重写 Dispose 方法，释放内联日志记录器的资源
            </summary>
        </member>
        <member name="T:Ivony.Logs.TextFileLogger">
            <summary>
            文件日志记录器
            </summary>
        </member>
        <member name="M:Ivony.Logs.TextFileLogger.#ctor(Ivony.Logs.LogFilenameStrategy,Ivony.Logs.LogFilter,System.Text.Encoding)">
            <summary>
            创建文本文件日志记录器
            </summary>
            <param name="filenameProvider">文件名提供程序</param>
            <param name="filter">日志筛选器</param>
            <param name="encoding">文件编码</param>
        </member>
        <member name="M:Ivony.Logs.TextFileLogger.#ctor(System.IO.DirectoryInfo,Ivony.Logs.LogFilter,Ivony.Logs.LogFilenameStrategy,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            创建文本文件日志记录器
            </summary>
            <param name="logDirectory">存放日志文件的目录</param>
            <param name="filter">日志筛选器</param>
            <param name="cycle">日志文件记录周期</param>
            <param name="prefix">文件名前缀</param>
            <param name="postfix">文件名后缀</param>
            <param name="extension">文件扩展名</param>
            <param name="encoding">文件编码</param>
        </member>
        <member name="M:Ivony.Logs.TextFileLogger.GetFilepath(Ivony.Logs.LogEntry)">
            <summary>
            获取日志文件路径
            </summary>
            <param name="entry">要记录的日志条目</param>
            <returns>日志文件路径</returns>
        </member>
        <member name="T:Ivony.Logs.LogEntry">
            <summary>
            表示一条日志记录
            </summary>
        </member>
        <member name="M:Ivony.Logs.LogEntry.#ctor(System.String,Ivony.Logs.LogMeta,System.Object)">
            <summary>
            创建一条日志记录
            </summary>
            <param name="message">日志消息</param>
            <param name="meta">日志元数据</param>
            <param name="raw">日志记录的原始对象</param>
        </member>
        <member name="P:Ivony.Logs.LogEntry.LogDate">
            <summary>
            获取日志产生的时间，该时间以 UTC 时间表示
            </summary>
        </member>
        <member name="P:Ivony.Logs.LogEntry.MetaData">
            <summary>
            获取日志元数据，其包含了日志来源、范畴等信息
            </summary>
        </member>
        <member name="P:Ivony.Logs.LogEntry.Message">
            <summary>
            日志消息
            </summary>
        </member>
        <member name="P:Ivony.Logs.LogEntry.RawObject">
            <summary>
            产生日志的原始对象
            </summary>
        </member>
        <member name="M:Ivony.Logs.LogEntry.SetMetaData(System.Object[])">
            <summary>
            创建一个新的日志条目，使用新的日志元数据
            </summary>
            <param name="metaData">要设置的日志元数据</param>
            <returns></returns>
        </member>
        <member name="T:Ivony.Logs.LogExtensions">
            <summary>
            提供记录日志的一系列扩展方法
            </summary>
        </member>
        <member name="M:Ivony.Logs.LogExtensions.LogInfo(Ivony.Logs.Logger,System.String,System.Object[])">
            <summary>
            记录一个信息性日志
            </summary>
            <param name="logger">日志记录器</param>
            <param name="message">日志消息</param>
            <param name="args">日志消息参数</param>
        </member>
        <member name="M:Ivony.Logs.LogExtensions.LogImportantInfo(Ivony.Logs.Logger,System.String,System.Object[])">
            <summary>
            记录一个重要信息日志
            </summary>
            <param name="logger">日志记录器</param>
            <param name="message">日志消息</param>
            <param name="args">日志消息参数</param>
        </member>
        <member name="M:Ivony.Logs.LogExtensions.LogWarning(Ivony.Logs.Logger,System.String,System.Object[])">
            <summary>
            记录一个警告信息
            </summary>
            <param name="logger">日志记录器</param>
            <param name="message">日志消息</param>
            <param name="args">日志消息参数</param>
        </member>
        <member name="M:Ivony.Logs.LogExtensions.LogError(Ivony.Logs.Logger,System.String,System.Object[])">
            <summary>
            记录一个错误信息
            </summary>
            <param name="logger">日志记录器</param>
            <param name="message">日志消息</param>
            <param name="args">日志消息参数</param>
        </member>
        <member name="M:Ivony.Logs.LogExtensions.LogException(Ivony.Logs.Logger,System.Exception)">
            <summary>
            记录一个异常信息
            </summary>
            <param name="logger">日志记录器</param>
            <param name="exception">异常对象</param>
        </member>
        <member name="M:Ivony.Logs.LogExtensions.LogFatalError(Ivony.Logs.Logger,System.String,System.Object[])">
            <summary>
            记录一个致命错误信息
            </summary>
            <param name="logger">日志记录器</param>
            <param name="message">日志消息</param>
            <param name="args">日志消息参数</param>
        </member>
        <member name="M:Ivony.Logs.LogExtensions.LogCrashError(Ivony.Logs.Logger,System.String,System.Object[])">
            <summary>
            记录一个引起系统崩溃无法恢复的错误信息
            </summary>
            <param name="logger">日志记录器</param>
            <param name="message">日志消息</param>
            <param name="args">日志消息参数</param>
        </member>
        <member name="T:Ivony.Logs.Logger">
            <summary>
            定义所有日志记录器的基类型
            </summary>
        </member>
        <member name="M:Ivony.Logs.Logger.#ctor">
            <summary>
            创建 Logger 对象
            </summary>
        </member>
        <member name="M:Ivony.Logs.Logger.LogEntry(Ivony.Logs.LogEntry)">
            <summary>
            由派生类实现，编写一条日志
            </summary>
            <param name="entry">要编写的日志条目</param>
        </member>
        <member name="M:Ivony.Logs.Logger.op_Addition(Ivony.Logs.Logger,Ivony.Logs.Logger)">
            <summary>
            重载 + 运算符，合并两个日志记录器，创建一个多播日志记录器
            </summary>
            <param name="logger1">要合并的第一个日志记录器</param>
            <param name="logger2">要合并的第二个日志记录器</param>
            <returns>合并后的多播日志记录器</returns>
        </member>
        <member name="P:Ivony.Logs.Logger.SyncRoot">
            <summary>
            获取用于同步的对象
            </summary>
        </member>
        <member name="M:Ivony.Logs.Logger.Dispose">
            <summary>
            派生类重写此方法以释放资源
            </summary>
        </member>
        <member name="T:Ivony.Logs.LogMeta">
            <summary>
            定义日志元数据
            </summary>
        </member>
        <member name="M:Ivony.Logs.LogMeta.#ctor">
            <summary>
            创建 LogMeta 对象
            </summary>
        </member>
        <member name="M:Ivony.Logs.LogMeta.GetDefaultMeta">
            <summary>
            获取默认日志元数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Logs.LogMeta.#ctor(Ivony.Logs.LogMeta)">
            <summary>
            从既有的元数据创建 LogMeta 对象
            </summary>
            <param name="metaData">既有的元数据</param>
        </member>
        <member name="M:Ivony.Logs.LogMeta.GetMetaData``1">
            <summary>
            获取指定类型的元数据
            </summary>
            <typeparam name="T">元数据类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Ivony.Logs.LogMeta.SetMetaData(System.Object[])">
            <summary>
            设置一个元数据
            </summary>
            <param name="metaData">元数据对象</param>
            <returns>设置后的日志元数据</returns>
        </member>
        <member name="T:Ivony.Logs.LogSource">
            <summary>
            定义日志源
            </summary>
        </member>
        <member name="P:Ivony.Logs.LogSource.Name">
            <summary>
            日志源名称
            </summary>
        </member>
        <member name="M:Ivony.Logs.LogSource.ToString">
            <summary>
            重写 ToString 方法，输出日志源名称
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ivony.Logs.LogType">
            <summary>
            定义日志类别的抽象
            </summary>
        </member>
        <member name="P:Ivony.Logs.LogType.DisplayName">
            <summary>
            显示名称
            </summary>
        </member>
        <member name="P:Ivony.Logs.LogType.Serverity">
            <summary>
            严重程度
            </summary>
        </member>
        <member name="P:Ivony.Logs.LogType.Guid">
            <summary>
            用于唯一标识该日志类别的 GUID。
            </summary>
        </member>
        <member name="M:Ivony.Logs.LogType.Equals(System.Object)">
            <summary>
            重写 Equals 方法，比较两个 LogType
            </summary>
            <param name="obj">要比较的对象</param>
            <returns>两个对象是否相等</returns>
        </member>
        <member name="M:Ivony.Logs.LogType.GetHashCode">
            <summary>
            重写 GetHashCode 方法，确保两个相同的 LogType 对象返回一样的结果
            </summary>
            <returns>对象的哈希值</returns>
        </member>
        <member name="M:Ivony.Logs.LogType.op_Equality(Ivony.Logs.LogType,Ivony.Logs.LogType)">
            <summary>
            重载 == 运算符，判断两个日志类型是否相等
            </summary>
            <param name="type1">第一个日志类型</param>
            <param name="type2">第二个日志类型</param>
            <returns>两个日志类型是否相等</returns>
        </member>
        <member name="M:Ivony.Logs.LogType.op_Inequality(Ivony.Logs.LogType,Ivony.Logs.LogType)">
            <summary>
            重载 == 运算符，判断两个日志类型是否不相等
            </summary>
            <param name="type1">第一个日志类型</param>
            <param name="type2">第二个日志类型</param>
            <returns>两个日志类型是否不相等</returns>
        </member>
        <member name="F:Ivony.Logs.LogType.Info">
            <summary>信息类别，代表一般日志信息</summary>
        </member>
        <member name="F:Ivony.Logs.LogType.ImportantInfo">
            <summary>重要信息类别，代表重要的日志信息</summary>
        </member>
        <member name="F:Ivony.Logs.LogType.Warning">
            <summary>警告信息类别，代表系统可能存在问题的信息</summary>
        </member>
        <member name="F:Ivony.Logs.LogType.Error">
            <summary>错误信息类别，代表系统出现了错误的日志信息</summary>
        </member>
        <member name="F:Ivony.Logs.LogType.Exception">
            <summary>异常信息类别，代表系统出现了未能处理的异常信息</summary>
        </member>
        <member name="F:Ivony.Logs.LogType.FatalError">
            <summary>致命错误类别，代表系统出现了严重的无法挽回的错误信息</summary>
        </member>
        <member name="F:Ivony.Logs.LogType.CrashError">
            <summary>系统崩溃错误类别，代表系统已经或者而即将崩溃的错误信息</summary>
        </member>
        <member name="T:Ivony.Logs.MulticastLogger">
            <summary>
            多播日志记录器
            </summary>
        </member>
        <member name="M:Ivony.Logs.MulticastLogger.#ctor(Ivony.Logs.Logger[])">
            <summary>
            创建一个多播日志记录器
            </summary>
            <param name="loggers">需要记录日志的日志记录器</param>
        </member>
        <member name="M:Ivony.Logs.MulticastLogger.#ctor(System.Boolean,Ivony.Logs.Logger[])">
            <summary>
            创建一个多播日志记录器
            </summary>
            <param name="throwExceptions">当任何一个日志记录器抛出异常时，是否应当中断日志记录并抛出异常</param>
            <param name="loggers">需要记录日志的日志记录器</param>
        </member>
        <member name="P:Ivony.Logs.MulticastLogger.Loggers">
            <summary>
            需要被转发的日志记录器
            </summary>
        </member>
        <member name="P:Ivony.Logs.MulticastLogger.ThrowExceptions">
            <summary>
            当记录日志出现异常时是否中断日志记录并抛出异常
            </summary>
        </member>
        <member name="M:Ivony.Logs.MulticastLogger.LogEntry(Ivony.Logs.LogEntry)">
            <summary>
            对所有的日志记录器同时写入日志条目
            </summary>
            <param name="entry">要记录的日志条目</param>
        </member>
        <member name="M:Ivony.Logs.MulticastLogger.Dispose">
            <summary>
            重写 Dispose 方法，释放所有日志记录器的资源
            </summary>
        </member>
        <member name="T:Ivony.Logs.TextFileLoggerBase">
            <summary>
            文本文件日志记录器基类
            </summary>
        </member>
        <member name="M:Ivony.Logs.TextFileLoggerBase.#ctor(Ivony.Logs.LogFilter,System.Text.Encoding)">
            <summary>
            初始化 TextFileLoggerBase 对象
            </summary>
            <param name="filter">可选的日志筛选器</param>
            <param name="encoding">写入文件所用的编码</param>
        </member>
        <member name="M:Ivony.Logs.TextFileLoggerBase.GetFilepath(Ivony.Logs.LogEntry)">
            <summary>
            派生类重写此方法获取要写入的日志文件路径
            </summary>
            <param name="entry">要写入的日志条目</param>
            <returns>要将该日志文件写入的路径</returns>
        </member>
        <member name="P:Ivony.Logs.TextFileLoggerBase.Encoding">
            <summary>
            获取写入文件所用的编码
            </summary>
        </member>
        <member name="M:Ivony.Logs.TextFileLoggerBase.WriteLogMessage(Ivony.Logs.LogEntry,System.String[])">
            <summary>
            重写 WriteLogMessage 方法将日志写入文本文件
            </summary>
            <param name="entry">日志条目对象</param>
            <param name="lines">要写入的文本行</param>
        </member>
        <member name="T:Ivony.Logs.TextLogFileManager">
            <summary>
            提供文本日志文件创建、编写等服务的类
            </summary>
        </member>
        <member name="P:Ivony.Logs.TextLogFileManager.AutoFlush">
            <summary>
            获取或设置一个值，该值指示是否在每次写入文本日志后，将立即刷新日志流。
            </summary>
        </member>
        <member name="M:Ivony.Logs.TextLogFileManager.WriteText(System.String,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            对指定的文本日志文件写入一段文本
            </summary>
            <param name="filepath">日志文件路径</param>
            <param name="content">文本内容</param>
            <param name="encoding">文本编码</param>
            <param name="flush">在写入后是否立即刷新日志流</param>
        </member>
        <member name="M:Ivony.Logs.TextLogFileManager.Flush">
            <summary>
            刷新所有日志文本流，确保所有修改已经写入。
            </summary>
        </member>
        <member name="M:Ivony.Logs.TextLogFileManager.Close(System.String)">
            <summary>
            关闭指定路径的文件，将所有修改写入磁盘。
            </summary>
            <param name="filepath">文件路径</param>
        </member>
        <member name="P:Ivony.Logs.TextLogFileManager.DefaultEncoding">
            <summary>
            获取编写日志时默认所需要采用的编码
            </summary>
        </member>
        <member name="T:Ivony.Logs.TextLogger">
            <summary>
            文本日志记录器基类，将日志信息以文本形式记录的所有记录器的基类
            </summary>
        </member>
        <member name="M:Ivony.Logs.TextLogger.#ctor(Ivony.Logs.LogFilter,System.TimeZoneInfo)">
            <summary>
            创建 TextLogger 对象
            </summary>
            <param name="filter">日志筛选器</param>
            <param name="timezone">时区信息（默认为UTC-0）</param>
        </member>
        <member name="M:Ivony.Logs.TextLogger.LogEntry(Ivony.Logs.LogEntry)">
            <summary>
            写入一条日志信息
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Ivony.Logs.TextLogger.ReleaseWriter(System.IO.TextWriter)">
            <summary>
            释放文本编写器
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Ivony.Logs.TextLogger.WriteLogMessage(Ivony.Logs.LogEntry,System.String[])">
            <summary>
            派生类实现此方法写入日志
            </summary>
            <param name="entry">要写入的日志条目</param>
            <param name="contents">要写入的日志内容</param>
        </member>
        <member name="M:Ivony.Logs.TextLogger.Write(Ivony.Logs.LogEntry,System.String,System.String)">
            <summary>
            使用指定的前缀写入多行日志
            </summary>
            <param name="entry">要写入的日志条目</param>
            <param name="padding">填充字符串，将会添加在每一行日志的前面</param>
            <param name="message">要写入的日志消息</param>
        </member>
        <member name="M:Ivony.Logs.TextLogger.SplitMultiLine(System.String)">
            <summary>
            将多行消息按照换行符拆分成多个字符串
            </summary>
            <param name="message">多行消息</param>
            <returns>拆分后的结果</returns>
        </member>
        <member name="M:Ivony.Logs.TextLogger.GetPadding(Ivony.Logs.LogEntry)">
            <summary>
            获取日志消息的填充，将会自动添加在日志消息的每一行的开头
            </summary>
            <param name="entry">当前要记录的日志</param>
            <returns>当前日志消息的填充</returns>
        </member>
        <member name="M:Ivony.Logs.TextLogger.GetDateTime(Ivony.Logs.LogEntry)">
            <summary>
            获取转换时区后的日志记录时间
            </summary>
            <param name="entry">日志条目</param>
            <returns>转换后的时间</returns>
        </member>
        <member name="M:Ivony.Logs.TextLogger.GetTypePrefix(Ivony.Logs.LogType)">
            <summary>
            获取日志消息的类型前缀，将会自动添加在每一行消息以标识这个消息的类型
            </summary>
            <param name="type">当前要记录的日志</param>
            <returns>当前日志消息的前缀</returns>
        </member>
        <member name="P:Ivony.Logs.TextLogger.DateTimeFormatString">
            <summary>
            获取日期字符串格式
            </summary>
        </member>
        <member name="P:Ivony.Logs.TextLogger.TimeZone">
            <summary>
            获取应使用的时区信息（默认为UTC-0）
            </summary>
        </member>
        <member name="P:Ivony.Logs.TextLogger.FormatProvider">
            <summary>
            格式化提供程序
            </summary>
        </member>
    </members>
</doc>
